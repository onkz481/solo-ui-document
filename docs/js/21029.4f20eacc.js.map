{"version":3,"file":"js/21029.4f20eacc.js","mappings":"mIAAC,SAAUA,GACV,IAAIC,EAAaD,EAAME,KAAKC,MAAMH,EAAMI,UAAUH,YAClDD,EAAMI,UAAUC,IAAML,EAAMI,UAAUE,OAAO,MAAOL,UAG7CD,EAAMI,UAAUC,IAAI,oBACpBL,EAAMI,UAAUC,IAAI,oBAK3B,IAAIE,EAAMP,EAAMI,UAAUC,IAAIE,IAC9BA,EAAIC,QAAUC,OAAO,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAAKH,EAAIC,QAAQG,OACjGJ,EAAIK,YAAa,GAblB,CAcEZ","sources":["webpack://@onkz481/solo-ui-document/./node_modules/prismjs/components/prism-tsx.js"],"sourcesContent":["(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.tsx['parameter'];\n\tdelete Prism.languages.tsx['literal-property'];\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n"],"names":["Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"sourceRoot":""}